# Stage 1: Build Stage
FROM node:20-alpine3.18 AS build

WORKDIR /app

# Copy package.json, pnpm-lock.yaml, and .npmrc if it exists

COPY package.json pnpm-lock.yaml ./

RUN npm install -g pnpm@9.12.2 && pnpm install --frozen-lockfile

# Copy the rest of the project files
COPY . .

# Build the application
RUN pnpm dlx prisma generate && pnpm build

# Stage 2: Production Stage
FROM node:20-alpine3.18 AS production

# RUN apk add --no-cache \
#     openssl \
#     bash \
#     libc6-compat \
#     libstdc++ \
#     libgcc \
#     && npm install -g npm@latest

# Set working directory
ENV NODE_ENV=production
WORKDIR /app

# Copy the package.json, pnpm-lock.yaml, and .npmrc files
COPY package.json pnpm-lock.yaml* ./

COPY --from=build /app/dist /app/dist

# Copy any Prisma files needed in production (e.g., Prisma client)
COPY --from=build /app/node_modules/@prisma /app/node_modules/@prisma
COPY --from=build /app/prisma /app/prisma
COPY --from=build /app/tsconfig.json /app/tsconfig.json
# Install only production dependencies using pnpm
RUN npm install -g pnpm@9.12.2 && pnpm install --prod --frozen-lockfile

# Clean up unnecessary files with node-prune
RUN apk add --no-cache curl \
    && curl -sfL https://gobinaries.com/tj/node-prune | sh \
    && node-prune \
    && apk del curl

# Expose the application port (change if needed)
EXPOSE 8080

# Start the application
CMD ["node", "dist/index.js"]
