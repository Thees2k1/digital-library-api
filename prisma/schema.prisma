generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String  @db.VarChar(100)
  avatar String? @db.VarChar(255)
  bio   String? @db.Text
  birthDate DateTime @map("birth_date") @db.Date
  deathDate DateTime? @map("death_date") @db.Date
  country String? @db.VarChar(100)
  books Book[]
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @map("updated_at") @db.Timestamp(0)
  @@index([name], name: "name")
  @@map("author")
}

model BookDigitalItem {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId    String       @db.Uuid @map("book_id")
  book      Book        @relation(fields: [bookId], references: [id])
  format    item_format @default(pdf)
  url       String      @db.VarChar(255)
  size      Int?         
  md5       String      @db.VarChar(255)
  sha256    String      @db.VarChar(255)
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @map("updated_at") @db.Timestamp(0)

  @@unique([bookId, format], name: "bookId_format")
  @@index([bookId], map: "book_id")
  @@map("book_digital_item")
}

model Book {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String            @db.VarChar(255)
  authorId     String             @db.Uuid @map("author_id")
  author       Author            @relation(fields: [authorId], references: [id])
  cover        String            @db.VarChar(255)
  publisherId  String?            @db.Uuid @map("publisher_id")
  publisher    Publisher?        @relation(fields: [publisherId], references: [id])
  releaseDate  DateTime          @map("release_date") @db.Date
  description  String?           @db.Text
  digitalItems BookDigitalItem[]
  pages        Int
  language     String            @db.VarChar(100)
  categoryId   String           @db.Uuid @map("category_id")
  category     Category          @relation(fields: [categoryId], references: [id])   
  genres       BookGenre[]
  status       BookStatus        @default(draft)
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime          @default(now()) @map("updated_at") @db.Timestamp(0)
  likes        Like[]
  reviews      Review[]
  readBooks    UserReadBook[]
  serieId      String?            @db.Uuid @map("serie_id")
  serie        Serie?            @relation(fields: [serieId], references: [id])
  @@map("book")
}

model Publisher {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @db.VarChar(128)
  cover String? @db.VarChar(255)
  contactInfo String? @db.VarChar(255) @map("contact_info")
  address String? @db.Text
  books Book[]
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime          @default(now()) @map("updated_at") @db.Timestamp(0)

  @@map("publisher")
}
model Serie {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @db.VarChar(128)
  cover String? @db.VarChar(255)
  description String? @db.Text
  books Book[]
  status SerieStatus @default(planned)
  releaseDate DateTime @map("release_date") @db.Date
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime          @default(now()) @map("updated_at") @db.Timestamp(0)

  @@map("serie")
}

model Category {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @db.VarChar(128)
  cover String? @db.VarChar(255)
  description String? @db.Text
 books Book[]
 createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime          @default(now()) @map("updated_at") @db.Timestamp(0)
  @@map("category")
}

model Genre {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @db.VarChar(128)
  description String? @db.Text
  books BookGenre[]
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime          @default(now()) @map("updated_at") @db.Timestamp(0)
  @@map("genre")
}

model BookGenre {
  bookId     String    @db.Uuid @map("book_id")
  book       Book     @relation(fields: [bookId], references: [id])
  genreId String    @db.Uuid @map("genre_id")
  genre   Genre @relation(fields: [genreId], references: [id])

  @@id([bookId, genreId])
  @@map("book_genre")
}

model User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName  String         @map("first_name") @db.VarChar(50)
  lastName   String         @map("last_name") @db.VarChar(50)
  avatar     String?        @db.VarChar(255)
  identity   UserIdentity? 
  sessions   UserSession?
  createdAt  DateTime       @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime       @default(now()) @map("updated_at") @db.Timestamp(0)
  likes      Like[]
  reviews    Review[]
  readBooks  UserReadBook[] 
  @@map("user")
}

model UserIdentity {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String    @unique // Đánh index vào trường email
  password String    @db.VarChar(128) // This should be a hashed password
  role     user_role @default(user) // You can use an enum or store role as a string
  userId   String     @unique @db.Uuid @map("user_id")
  user     User       @relation(fields: [userId], references: [id])

  @@index([userId], map: "identity_user_id")
  @@map("user_identify")
}

model UserSession {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @unique @db.Uuid @map("user_id") // Đánh index vào trường này
  user      User     @relation(fields: [userId], references: [id])
  signature String   @unique @db.VarChar(255)
  ipAddress   String?  @db.VarChar(45)  @map("ip_address")         // IP Address (supports IPv6)
  userAgent   String?  @db.VarChar(255)  @map("user_agent")       // User-Agent info
  deviceInfo  String?  @db.VarChar(255)  @map("device_info")       // Device information, if needed
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)
  expiresAt DateTime @map("expires_at") @db.Timestamp(0)

  @@index([userId], map: "session_user_id")
  @@map("user_session")
}

model Review {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId    String    @db.Uuid @map("book_id")
  book      Book     @relation(fields: [bookId], references: [id])
  userId    String    @db.Uuid @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  rating    Int      @db.SmallInt @default(0)
  review    String   @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([userId, bookId], name: "userId_bookId")
  @@map("reviews")
}

model Like {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User       @relation(fields: [userId], references: [id])
  book      Book       @relation(fields: [bookId], references: [id])
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  status    LikeStatus @default(liked) 
  userId    String    @db.Uuid @map("user_id")
  bookId    String    @db.Uuid @map("book_id")

  @@unique([userId, bookId]) 
  @@map("likes")
}

model UserReadBook {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId    String    @db.Uuid @map("book_id")
  book      Book     @relation(fields: [bookId], references: [id])
  userId    String    @db.Uuid @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  readAt    DateTime @default(now()) @map("read_at") @db.Timestamp(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  
  @@map("user_read_book")
}

enum item_format {
  pdf
  epub
  mp3
}

enum user_role {
  user
  admin
}

enum LikeStatus {
  liked
  unliked
}

enum BookStatus {
  published
  draft
  archived
  deleted
}

enum SerieStatus {
  planned
  ongoing
  completed
  archived
  deleted
}
